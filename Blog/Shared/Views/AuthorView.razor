@page "/author/{Id}"

@using Blog.App.Content.Models
@using Blog.App.Content.Services
@using Post = Blog.Shared.Components.Post
@using BlogPost = Blog.App.Content.Models.Post

@inject AuthorAccessService AuthorAccessService
@inject PostAccessService PostAccessService

@if (Author != null)
{
    <HeadContent>
        <meta name="description" content="@Author.Description"/>
        <meta name="author" content="@Author.Name"/>
        <PageTitle>@Author.Name</PageTitle>
    </HeadContent>
    
    <header class="masthead" style="background-image: url('assets/img/codebg.png')">
        <div class="container position-relative px-4 px-lg-5">
            <div class="row gx-4 gx-lg-5 justify-content-center">
                <div class="col-md-10 col-lg-8 col-xl-7">
                    <div class="page-heading">
                        <h1>@Author.Name</h1>
                    </div>
                </div>
            </div>
        </div>
    </header>

    <ContentPage>
        <h1>Über mich</h1>
        <table style="table-layout: fixed" class="w-100">
            <tr>
                <td class="w-25 align-top pe-2">
                    <img src="@Author.ImagePath" class="align-top rounded-circle w-100"/>
                </td>
                <td class="w-75 align-top mt-0">
                    <p class="mt-0">@Author.Description</p>
                </td>
            </tr>
        </table>

        <h1 class="mt-2">Posts von @Author.Name</h1>
        <hr class="my-1" />
        @foreach (var post in PostsByAuthor)
        {
            <Post Author="@post.GetAuthor().Name"
                  Description="@post.Description"
                  Title="@post.Title"
                  AuthorUrl="@($"/author/{post.Author}/")"
                  Url="@($"/{post.CategoryId}/{post.Id}/")"
                  Date="@post.Date"/>
        }
    </ContentPage>
}
else
{
    <Header ImagePath="assets/img/codebg.png" Heading="404" Subheading="Diese Seite konnte nicht gefunden werden."></Header>
    <ContentPage>
        <br />
    </ContentPage>
}

@code {
    [Parameter] public string Id { get; set; }

    private Author? Author = null;
    private List<BlogPost> PostsByAuthor = new();

    protected override void OnInitialized()
    {
        Author = AuthorAccessService.GetAllAuthors().FirstOrDefault(x => x.Id == Id);
        if (Author != null)
        {
            PostsByAuthor = PostAccessService.GetAllPosts().Where(x => x.Author == Id).OrderByDescending(x => DateTime.Parse(x.Date
                .Replace("Januar", "January")
                .Replace("Februar", "February")
                .Replace("März", "March")
                .Replace("April", "April")
                .Replace("Mai", "May")
                .Replace("Juni", "June")
                .Replace("Juli", "July")
                .Replace("August", "August")
                .Replace("September", "September")
                .Replace("Oktober", "October")
                .Replace("November", "November")
                .Replace("Dezember", "December")
                )).ToList();
        }
        base.OnInitialized();
    }
}